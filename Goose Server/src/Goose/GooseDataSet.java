package Goose;

import Goose.GooseDataSet;


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/**
* Represents a strongly typed in-memory cache of data.
*/

public class GooseDataSet {
}
/*
public class GooseDataSet  extends System.Data.DataSet 
{

    private System.Data.SchemaSerializationMode _schemaSerializationMode = .Data.SchemaSerializationMode.IncludeSchema;
    public GooseDataSet() throws Exception {
        this.BeginInit();
        this.initClass();
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        super.Tables.CollectionChanged += schemaChangedHandler;
        super.Relations.CollectionChanged += schemaChangedHandler;
        this.EndInit();
    }

    protected GooseDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) throws Exception {
        super(info, context, false);
        if ((this.IsBinarySerialized(info, context) == true))
        {
            this.initVars(false);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.getTables().CollectionChanged += schemaChangedHandler1;
            this.getRelations().CollectionChanged += schemaChangedHandler1;
            return ;
        }
         
        String strSchema = ((String)(info.GetValue("XmlSchema", String.class)));
        if ((this.DetermineSchemaSerializationMode(info, context) == .Data.SchemaSerializationMode.IncludeSchema))
        {
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, .Data.MissingSchemaAction.Add);
            this.initVars();
        }
        else
        {
            this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
        } 
        this.GetSerializationData(info, context);
        System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
        super.Tables.CollectionChanged += schemaChangedHandler;
        this.getRelations().CollectionChanged += schemaChangedHandler;
    }

    public System.Data.SchemaSerializationMode getSchemaSerializationMode() throws Exception {
        return this._schemaSerializationMode;
    }

    public void setSchemaSerializationMode(System.Data.SchemaSerializationMode value) throws Exception {
        this._schemaSerializationMode = value;
    }

    public System.Data.DataTableCollection getTables() throws Exception {
        return super.Tables;
    }

    public System.Data.DataRelationCollection getRelations() throws Exception {
        return super.Relations;
    }

    protected void initializeDerivedDataSet() throws Exception {
        this.BeginInit();
        this.initClass();
        this.EndInit();
    }

    public System.Data.DataSet clone() {
        try
        {
            GooseDataSet cln = ((GooseDataSet)(super.clone()));
            cln.initVars();
            cln.setSchemaSerializationMode(this.getSchemaSerializationMode());
            return cln;
        }
        catch (RuntimeException __dummyCatchVar0)
        {
            throw __dummyCatchVar0;
        }
        catch (Exception __dummyCatchVar0)
        {
            throw new RuntimeException(__dummyCatchVar0);
        }
    
    }

    protected boolean shouldSerializeTables() throws Exception {
        return false;
    }

    protected boolean shouldSerializeRelations() throws Exception {
        return false;
    }

    protected void readXmlSerializable(System.Xml.XmlReader reader) throws Exception {
        if ((this.DetermineSchemaSerializationMode(reader) == .Data.SchemaSerializationMode.IncludeSchema))
        {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, .Data.MissingSchemaAction.Add);
            this.initVars();
        }
        else
        {
            this.ReadXml(reader);
            this.initVars();
        } 
    }

    protected System.Xml.Schema.XmlSchema getSchemaSerializable() throws Exception {
        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
        stream.Position = 0;
        return .Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
    }

    public void initVars() throws Exception {
        this.initVars(true);
    }

    public void initVars(boolean initTable) throws Exception {
    }

    private void initClass() throws Exception {
        this.DataSetName = "GooseDataSet";
        this.Prefix = "";
        this.Namespace = "http://tempuri.org/GooseDataSet.xsd";
        this.EnforceConstraints = true;
        this.setSchemaSerializationMode(.Data.SchemaSerializationMode.IncludeSchema);
    }

    private void schemaChanged(Object sender, System.ComponentModel.CollectionChangeEventArgs e) throws Exception {
        if ((e.Action == .ComponentModel.CollectionChangeAction.Remove))
        {
            this.initVars();
        }
         
    }

    public static System.Xml.Schema.XmlSchemaComplexType getTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) throws Exception {
        GooseDataSet ds = new GooseDataSet();
        System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
        System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
        System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
        any.Namespace = ds.Namespace;
        sequence.Items.Add(any);
        type.Particle = sequence;
        System.Xml.Schema.XmlSchema dsSchema = ds.getSchemaSerializable();
        if (xs.Contains(dsSchema.TargetNamespace))
        {
            System.IO.MemoryStream s1 = new System.IO.MemoryStream();
            System.IO.MemoryStream s2 = new System.IO.MemoryStream();
            try
            {
                System.Xml.Schema.XmlSchema schema = null;
                dsSchema.Write(s1);
                for (System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();schemas.MoveNext();)
                {
                    schema = ((System.Xml.Schema.XmlSchema)(schemas.Current));
                    s2.SetLength(0);
                    schema.Write(s2);
                    if ((s1.Length == s2.Length))
                    {
                        s1.Position = 0;
                        s2.Position = 0;
                        for (;((s1.Position != s1.Length) && (s1.ReadByte() == s2.ReadByte()));)
                        {
                                ;
                        }
                        if ((s1.Position == s1.Length))
                        {
                            return type;
                        }
                         
                    }
                     
                }
            }
            finally
            {
                if ((s1 != null))
                {
                    s1.Close();
                }
                 
                if ((s2 != null))
                {
                    s2.Close();
                }
                 
            }
        }
         
        xs.Add(dsSchema);
        return type;
    }

}


*/